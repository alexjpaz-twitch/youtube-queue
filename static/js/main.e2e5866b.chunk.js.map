{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","App","classes","React","useState","rewardQueue","setRewardQueue","useEffect","channel","URLSearchParams","window","location","hash","slice","get","token","console","log","ComfyJS","user","reward","cost","message","extra","item","key","JSON","stringify","Date","getTime","q","Container","fixed","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","scope","properties","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAeMA,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OA4DCC,MAxDf,WACE,IAAMC,EAAUL,IADH,EAG2BM,IAAMC,SAAS,IAH1C,mBAGLC,EAHK,KAGQC,EAHR,KA4Bb,OAvBAC,qBAAU,WACR,IAAMC,EAAU,IAAIC,gBAAgBC,OAAOC,SAASC,KAAKC,MAAM,IAAIC,IAAI,WACjEC,EAAQ,IAAIN,gBAAgBC,OAAOC,SAASC,KAAKC,MAAM,IAAIC,IAAI,SAGrEE,QAAQC,IAAIT,EAASO,GAErBG,WAAmB,SAAEC,EAAMC,EAAQC,EAAMC,EAASC,GAChD,IAAMC,EAAO,CACXC,IAAKC,KAAKC,UAAU,CAAER,EAAMC,EAAQE,GAAS,IAAIM,MAAOC,YACxDV,OACAC,SACAE,WAGFN,QAAQC,IAAIO,GAEZlB,GAAe,SAAAwB,GAAC,4BAASA,GAAT,CAAYN,QAG9BN,OAAcV,EAASO,KACtB,IAGD,cAACgB,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOC,UAAWnC,EAAQH,MAAOuC,aAAW,eAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,OAAjB,0BAGJ,cAACC,EAAA,EAAD,UACGtC,EAAYuC,KAAI,SAACC,GAAD,OACf,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWP,UAAU,KAAKY,MAAM,MAAhC,SACGD,EAAI1B,OAEP,cAACsB,EAAA,EAAD,CAAWC,MAAM,OAAjB,SACE,cAAC,IAAD,CAASK,WAAY,CAACC,OAAQ,UAA9B,SAA0CH,EAAIvB,cALnCuB,EAAIpB,kBCjDlBwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e2e5866b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\nimport * as ComfyJS from 'comfy.js';\nimport Linkify from 'react-linkify';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n})\n\nfunction App() {\n  const classes = useStyles();\n\n  const [ rewardQueue, setRewardQueue ] = React.useState([]);\n\n  useEffect(() => {\n    const channel = new URLSearchParams(window.location.hash.slice(1)).get(\"channel\");\n    const token = new URLSearchParams(window.location.hash.slice(1)).get(\"token\");\n    //const reward = new URLSearchParams(window.location.hash.slice(1)).get(\"reward\");\n    //\n    console.log(channel, token);\n\n    ComfyJS.onReward = ( user, reward, cost, message, extra ) => {\n      const item = {\n        key: JSON.stringify([ user, reward, message, new Date().getTime() ]),\n        user,\n        reward,\n        message\n      };\n\n      console.log(item);\n\n      setRewardQueue(q => [ ...q, item ]);\n    }\n\n    ComfyJS.Init( channel, token );\n  }, [ ]);\n\n  return (\n    <Container fixed>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>User</TableCell>\n              <TableCell align=\"left\">message</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rewardQueue.map((row) => (\n              <TableRow key={row.key}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.user}\n                </TableCell>\n                <TableCell align=\"left\">\n                  <Linkify properties={{target: '_blank'}}>{row.message}</Linkify>\n                </TableCell>\n              </TableRow>\n            ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}